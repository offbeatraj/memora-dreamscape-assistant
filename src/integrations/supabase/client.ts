
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mxvzaxceulwxwpfnoaye.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im14dnpheGNldWx3eHdwZm5vYXllIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNjYwODUsImV4cCI6MjA1OTg0MjA4NX0.PEkjVtfilrMf2jhvlWXK05BMTgJXDS_FnvMQOT_wCQk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function for handling storage downloads
export const getFileUrl = (path: string) => {
  return supabase.storage.from('patient-files').getPublicUrl(path).data.publicUrl;
};

// Helper function for file uploads
export const uploadPatientFile = async (
  file: File, 
  patientId: string, 
  fileCategory: string,
  notes?: string
) => {
  try {
    const fileName = `${patientId}/${Date.now()}-${file.name}`;
    
    // Upload file to storage
    const { data: fileData, error: fileError } = await supabase.storage
      .from('patient-files')
      .upload(fileName, file);
    
    if (fileError) throw fileError;

    // Get the public URL
    const { data: urlData } = supabase.storage
      .from('patient-files')
      .getPublicUrl(fileName);

    // Insert into patient_files table
    const { data, error } = await supabase
      .from('patient_files')
      .insert({
        patient_id: patientId,
        file_name: file.name,
        file_type: file.type,
        file_size: file.size,
        file_path: urlData?.publicUrl ?? fileName,
        file_category: fileCategory,
        notes: notes || null
      });
    
    if (error) throw error;
    
    return urlData?.publicUrl;
  } catch (error) {
    console.error("Error uploading file:", error);
    throw error;
  }
};

// Emit an event when a new patient conversation occurs
export const savePatientConversation = (patientId: string, message: string, title: string = "AI Assistant") => {
  try {
    // Create a conversation object
    const conversation = {
      patientId,
      message,
      title,
      timestamp: new Date().toISOString(),
    };
    
    // Import and use the storage function from aiModelUtils
    import('@/utils/aiModelUtils').then(module => {
      module.storePatientConversation(patientId, conversation);
    });
    
    // Dispatch an event to notify other components
    const event = new CustomEvent('newPatientConversation', { 
      detail: { 
        patientId,
        conversation 
      }
    });
    
    document.dispatchEvent(event);
    
    return true;
  } catch (error) {
    console.error('Error saving patient conversation:', error);
    return false;
  }
};
